plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'java'
    id 'pmd'
    id("net.ltgt.errorprone") version "4.1.0"
    id("com.github.spotbugs") version "6.1.7"
}

group 'Tartan'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'

application {
    mainClass = 'tartan.smarthome.TartanHomeApplication'
}

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "com.sun.xml.bind:jaxb-core:4.0.4"
    implementation "com.sun.xml.bind:jaxb-impl:4.0.4"
    implementation "javax.activation:activation:1.1.1"
    implementation 'io.dropwizard:dropwizard-bom:4.0.7'
    implementation 'io.dropwizard:dropwizard-core:4.0.7'
    implementation 'io.dropwizard:dropwizard-views-freemarker:4.0.7'
    implementation 'io.dropwizard:dropwizard-auth:4.0.7'
    implementation 'io.dropwizard:dropwizard-hibernate:4.0.7'
    implementation 'io.dropwizard:dropwizard-assets:4.0.7'
    implementation 'mysql:mysql-connector-java:8.0.33'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

    errorprone "com.google.errorprone:error_prone_core:2.28.0"

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
    spotbugs 'com.github.spotbugs:spotbugs:4.8.6'
}

run {
    args = ['server', 'config.yml']
}

shadowJar {
    mergeServiceFiles()
    manifest {
        attributes(
            'Implementation-Title': rootProject.name,
            'Implementation-Version': rootProject.version,
            'Implementation-Vendor-Id': rootProject.group,
            'Created-By': 'Gradle ' + gradle.gradleVersion,
            'Main-Class': 'tartan.smarthome.TartanHomeApplication'
        )
    }
    archiveFileName.set(rootProject.name + '-' + rootProject.version + '.jar')
}

tasks.named('distZip').configure {
    dependsOn tasks.named('shadowJar')
}

tasks.named('distTar').configure {
    dependsOn tasks.named('shadowJar')
}

tasks.named('startScripts').configure {
    dependsOn tasks.named('shadowJar')
}

tasks.named('startShadowScripts').configure {
    dependsOn tasks.named('shadowJar')
}

tasks.named('jar').configure {
    enabled = false
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

pitest {
    targetClasses=['tartan.smarthome.*']
    junit5PluginVersion = '1.2.1'
    pitestVersion = '1.15.2'
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}

pmd {
    ignoreFailures = true
    consoleOutput = false
    reportsDir = file("$buildDir/PMD")
    toolVersion = "7.0.0"
    rulesMinimumPriority = 5
    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
}
//
//pmd {
//    // Adjust to your preferred PMD version
//    consoleOutput = true
//    ignoreFailures = true
//}
//
//tasks.withType(Pmd) {
//    reports {
//        xml.required = false
//        html.required = true
//    }
//}

tasks.withType(JavaCompile).configureEach {
    options.errorprone.disableWarningsInGeneratedCode = false
    options.errorprone.checkOptions.put("ReportFile", "$buildDir/errorprone/errorprone-report.xml")
}

//tasks {
//    compileTestJava {
//        options.errorprone.enabled = false
//    }
//}

tasks.spotbugsMain {
    reports.create("html") {
        required = true
        outputLocation = file("$buildDir/spotbugs/reports/spotbugs.html")
        setStylesheet("fancy-hist.xsl")
    }

}

tasks.spotbugsTest {
    reports.create("html") {
        required = true
        outputLocation = file("$buildDir/spotbugs/reports/spotbugsTest.html")
        setStylesheet("fancy-hist.xsl")
    }
}

// SpotBugs Configuration
spotbugs {
    ignoreFailures = true // Allow the build to continue even if bugs are found
//    showStackTraces = true
//    showProgress = false
////    reportLevel = com.github.spotbugs.snom.Confidence.values()[3] // Report all issues, including low-confidence ones
////    effort = com.github.spotbugs.snom.Effort.DEFAULT // Analysis effort level
////    visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
////    omitVisitors = [ 'FindNonShortCircuit' ]
//    reportsDir = file("$buildDir/spotbugs/reports/spotbugs") // Directory for reports
////    onlyAnalyze = ['com.foobar.MyClass', 'com.foobar.mypkg.*'] // Limit analysis to specific classes/packages
//    projectName = name
//    release = version
//    extraArgs = [ '-nested:false' ]
//    jvmArgs = [ '-Duser.language=ja' ]
//    maxHeapSize = '512m'
}

